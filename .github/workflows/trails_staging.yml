name: Main - reports Trails to https://staging.app.kosli.com

on:
  push:
    branches:
      - main

env:
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}
  KOSLI_HOST: https://staging.app.kosli.com
  KOSLI_ORG: cyber-dojo-trails
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN_TRAILS_STAGING }}
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}

jobs:

  variables:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.vars.outputs.image_name }}
      image_tag: ${{ steps.vars.outputs.image_tag }}
      kosli_host: ${{ steps.vars.outputs.kosli_host }}
      kosli_org: ${{ steps.vars.outputs.kosli_org }}
    steps:
    - name: Prepare
      id: vars
      run: |
        TAG=$(echo $GITHUB_SHA | head -c7)
        echo "image_name=cyberdojo/${{ env.KOSLI_FLOW }}:${TAG}" >> ${GITHUB_OUTPUT}
        echo "image_tag=${TAG}" >> ${GITHUB_OUTPUT}
        echo "kosli_host=${{ env.KOSLI_HOST }}" >> ${GITHUB_OUTPUT}
        echo "kosli_org=${{ env.KOSLI_ORG }}" >> ${GITHUB_OUTPUT}        

  create-kosli-trail:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Create Kosli Flow
        run:
          kosli create flow ${{ env.KOSLI_FLOW }} 
            --description="UX for a group practice dashboard" 
            --template-file=.kosli.yml

      - name: Begin Kosli Trail
        run:
          kosli begin trail "${GITHUB_SHA}"

  wait-for-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Wait for image to be built in main.yml
        run:
          ./sh/wait_for_image.sh

  test:
    needs: [variables, create-kosli-trail, wait-for-image]
    uses: ./.github/workflows/sub_test_trails.yml
    secrets:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN_TRAILS_STAGING }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    with:
      KOSLI_HOST: ${{ needs.variables.outputs.kosli_host }}
      KOSLI_ORG: ${{ needs.variables.outputs.kosli_org }}
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}

  sdlc-control-gate:
    needs: [variables, test]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit-the-trail
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}          
          docker pull ${IMAGE_NAME}
          kosli assert artifact ${IMAGE_NAME} \
            --artifact-type=docker          

  approve-deployment-to-beta:
    needs: [variables, sdlc-control-gate]
    uses: ./.github/workflows/sub_approve_deployment.yml
    secrets:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN_TRAILS_STAGING }}
    with:
      KOSLI_HOST: ${{ needs.variables.outputs.kosli_host }}
      KOSLI_ORG: ${{ needs.variables.outputs.kosli_org }}
      KOSLI_ENVIRONMENT: aws-beta
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}

  approve-deployment-to-prod:
    needs: [variables, approve-deployment-to-beta]
    uses: ./.github/workflows/sub_approve_deployment.yml
    secrets:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN_TRAILS_STAGING }}
    with:
      KOSLI_HOST: ${{ needs.variables.outputs.kosli_host }}
      KOSLI_ORG: ${{ needs.variables.outputs.kosli_org }}
      KOSLI_ENVIRONMENT: aws-prod
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}
