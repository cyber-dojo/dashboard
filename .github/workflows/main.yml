name: Main - reports Trails to https://app.kosli.com

on:
  push:
    branches:
      - main

env:
  # KOSLI_DRY_RUN: true                              # Repo override
  KOSLI_HOST: ${{ vars.KOSLI_HOST }}                 # https://app.kosli.com
  KOSLI_ORG: ${{ vars.KOSLI_ORG }}                   # cyber-dojo
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}                 # dashboard-ci
  KOSLI_TRAIL: ${{ github.sha }}
  SERVICE_NAME: ${{ github.event.repository.name }}  # dashboard
  KOSLI_SONAR_API_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}


jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      image_tag:     ${{ steps.variables.outputs.image_tag }}
      image_name:    ${{ steps.variables.outputs.image_name }}
      kosli_dry_run: ${{ steps.vars.outputs.kosli_dry_run }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set outputs
        id: variables
        run: |
          IMAGE_TAG=${GITHUB_SHA:0:7}
          echo "image_tag=${IMAGE_TAG}" >> ${GITHUB_OUTPUT}       
          echo "image_name=cyberdojo/${{ env.SERVICE_NAME }}:${IMAGE_TAG}" >> ${GITHUB_OUTPUT}          

          if [ "${{ vars.KOSLI_DRY_RUN }}" == "true" ] ; then      # Org override
            value=true   
          elif [ "${{ env.KOSLI_DRY_RUN }}" != "" ] ; then         # Repo override
            value="${{ env.KOSLI_DRY_RUN }}"  
          elif [ "${{ github.ref }}" == 'refs/heads/main' ] ; then # Branch check
            value=false
          else
            value=true                                             # Default
          fi
          echo "kosli_dry_run=${value}" >> ${GITHUB_OUTPUT}


  pull-request:
    runs-on: ubuntu-latest
    needs: [setup]
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest pull-request evidence to Kosli
        env:
          KOSLI_DRY_RUN: ${{ needs.setup.outputs.kosli_dry_run }}
        run:
          kosli attest pullrequest github
            --github-token="${{ secrets.GITHUB_TOKEN }}"
            --name=pull-request


  lint:
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Rubocop linter on source
        id: lint
        run:
          make lint

      - name: Setup Kosli CLI
        if: success() || failure()
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest results to Kosli
        if: success() || failure()
        env:
          KOSLI_DRY_RUN: ${{ needs.setup.outputs.kosli_dry_run }}
        run: |
          KOSLI_COMPLIANT=$([ "${{ steps.lint.outcome }}" == 'success' ] && echo true || echo false)          
          kosli attest generic \
            --name=dashboard.lint


  build-image:
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      IMAGE_NAME: ${{ needs.setup.outputs.image_name }}
    outputs:
      kosli_fingerprint: ${{ steps.variables.outputs.kosli_fingerprint }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push image to Dockerhub Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ needs.setup.outputs.image_name }}
          build-args:
            COMMIT_SHA=${{ github.sha }}

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest image to Kosli
        env:
          KOSLI_DRY_RUN: ${{ needs.setup.outputs.kosli_dry_run }}
        run:
          kosli attest artifact "${IMAGE_NAME}" 
            --artifact-type=docker
            --name=dashboard

      - name: Make Artifact fingerprint available to following jobs
        id: variables
        run: |
          FINGERPRINT=$(kosli fingerprint "${IMAGE_NAME}" --artifact-type=docker)
          echo "kosli_fingerprint=${FINGERPRINT}" >> ${GITHUB_OUTPUT}
              

  unit-tests:
    needs: [build-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run tests
        run:
          ./sh/run_tests_with_coverage.sh          


  snyk-container-scan:
    runs-on: ubuntu-latest
    needs: [setup, build-image]
    env:
      SARIF_FILENAME: snyk.container.scan.json
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk container scan
        env:
          IMAGE_NAME: ${{ needs.setup.outputs.image_name }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run:
          snyk container test "${IMAGE_NAME}" 
            --file=Dockerfile 
            --sarif 
            --sarif-file-output="${SARIF_FILENAME}" 
            --policy-path=.snyk

      - name: Setup Kosli CLI
        if: success() || failure()
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest Snyk container scan results to Kosli
        if: success() || failure()
        env:
          KOSLI_DRY_RUN:     ${{ needs.setup.outputs.kosli_dry_run }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
        run:
          kosli attest snyk 
            --name=dashboard.snyk-container-scan 
            --scan-results="${SARIF_FILENAME}"


  snyk-code-scan:
    runs-on: ubuntu-latest
    needs: [setup, build-image]
    env:
      SARIF_FILENAME: snyk.code.scan.json
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk code scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run:
          snyk code test 
            --sarif 
            --sarif-file-output="${SARIF_FILENAME}" 
            --policy-path=.snyk 
            .

      - name: Setup Kosli CLI
        if: success() || failure()
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest Snyk code scan results to Kosli
        if: success() || failure()
        env:
          KOSLI_DRY_RUN:  ${{ needs.setup.outputs.kosli_dry_run }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
        run:
          kosli attest snyk
            --name=dashboard.snyk-code-scan 
            --scan-results="${SARIF_FILENAME}"


  sonarcloud-scan:
    runs-on: ubuntu-latest
    needs: [setup, build-image]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run SonarCloud scan
        env:
          SONAR_TOKEN: ${{ env.KOSLI_SONAR_API_TOKEN }}
        uses: sonarsource/sonarcloud-github-action@master

      - name: Setup Kosli CLI
        if: success() || failure()
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest SonarCloud scan results to Kosli using Kosli CLI
        if: success() || failure()
        env:
          KOSLI_DRY_RUN:     ${{ needs.setup.outputs.kosli_dry_run }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
        run:
          kosli attest sonar
            --name=dashboard.sonarcloud-scan


  sdlc-control-gate:
    needs: [setup, lint, pull-request, unit-tests, snyk-container-scan, snyk-code-scan, setup, build-image, sonarcloud-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit the workflow
        env:
          IMAGE_NAME:        ${{ needs.setup.outputs.image_name }}
          KOSLI_DRY_RUN:     ${{ needs.setup.outputs.kosli_dry_run }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
        run:
          kosli assert artifact "${IMAGE_NAME}"


  approve-deployment-to-beta:
    runs-on: ubuntu-latest
    needs: [setup, sdlc-control-gate, setup, build-image]
    environment:
      name: staging
      url: https://beta.cyber-dojo.org
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        env:
          IMAGE_NAME:        ${{ needs.setup.outputs.image_name }}
          KOSLI_DRY_RUN:     ${{ needs.setup.outputs.kosli_dry_run }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
          KOSLI_ENVIRONMENT: aws-beta
        run:
          kosli report approval "${IMAGE_NAME}"
            --approver="${{ github.actor }}"

  deploy-to-beta:
    needs: [approve-deployment-to-beta, setup]
    uses: ./.github/workflows/sub_deploy_to_beta.yml
    with:
      IMAGE_TAG: ${{ needs.setup.outputs.image_tag }}


  approve-deployment-to-prod:
    runs-on: ubuntu-latest
    needs: [setup, deploy-to-beta, setup, build-image]
    environment:
      name: production
      url: https://cyber-dojo.org
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        env:
          IMAGE_NAME:        ${{ needs.setup.outputs.image_name }}
          KOSLI_DRY_RUN:     ${{ needs.setup.outputs.kosli_dry_run }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
          KOSLI_ENVIRONMENT: aws-prod
        run:
          kosli report approval "${IMAGE_NAME}"
            --approver="${{ github.actor }}"


  deploy-to-prod:
    needs: [approve-deployment-to-prod, setup]
    uses: ./.github/workflows/sub_deploy_to_prod.yml
    with:
      IMAGE_TAG: ${{ needs.setup.outputs.image_tag }}


  # The cyberdojo/versioner refresh-env.sh script
  # https://github.com/cyber-dojo/versioner/blob/master/sh/refresh-env.sh
  # relies on being able to:
  #   - get the :latest image
  #   - extract the SHA env-var embedded inside it
  #   - use the 1st 7 chars of the SHA as a latest-equivalent tag

  push-latest:
    needs: [deploy-to-prod, setup]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.setup.outputs.image_name }}
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Tag image to :latest and push to Dockerhub Registry
        run: |
          docker pull "${IMAGE_NAME}"
          docker tag "${IMAGE_NAME}" cyberdojo/${{ env.SERVICE_NAME }}:latest
          docker push cyberdojo/${{ env.SERVICE_NAME }}:latest