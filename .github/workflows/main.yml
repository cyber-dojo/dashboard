name: Main

on:
  push:
    branches:
      - main

env:
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}
  KOSLI_HOST: ${{ vars.KOSLI_HOST }}          # https://app.kosli.com
  KOSLI_ORG: ${{ vars.KOSLI_ORG }}            # cyber-dojo
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}          # dashboard

jobs:

  variables:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:
    - name: Prepare
      id: vars
      run: echo "image_tag=$(echo $GITHUB_SHA | head -c7)" >> ${GITHUB_OUTPUT}

  create-kosli-flow:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Create Kosli Flow
        run:
          kosli create flow ${{ env.KOSLI_FLOW }} 
            --description="UX for a group practice dashboard" 
            --template=artifact,snyk-scan,lint,pull-request

  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push image to Dockerhub Registry
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}
          build-args:
            COMMIT_SHA=${{ github.sha }}

#    needs: [variables]
#    uses: ./.github/workflows/sub_build_image.yml
#    secrets:
#      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
#      DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
#      DOCKER_USER: ${{ secrets.DOCKER_USER }}
#    with:
#      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}

  test:
    needs: [variables, create-kosli-flow, build-image]
    uses: ./.github/workflows/sub_test.yml
    secrets:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    with:
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}

  sdlc-gate:
    needs: [variables, test]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit-the-flow
        run: |
          IMAGE_NAME=cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}          
          docker pull ${IMAGE_NAME}
          kosli assert artifact ${IMAGE_NAME} \
            --artifact-type=docker          

#    uses: ./.github/workflows/sub_sdlc_gate.yml
#    secrets:
#      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
#    with:
#      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}

  approve-deployment-to-beta:
    needs: [variables, sdlc-gate]
    uses: ./.github/workflows/sub_approve_deployment.yml
    secrets:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
    with:
      KOSLI_ENVIRONMENT: aws-beta
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}

  deploy-to-beta:
    needs: [variables, approve-deployment-to-beta]
    uses: ./.github/workflows/sub_deploy_to_beta.yml
    with:
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}

  approve-deployment-to-prod:
    needs: [variables, deploy-to-beta]
    uses: ./.github/workflows/sub_approve_deployment.yml
    secrets:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
    with:
      KOSLI_ENVIRONMENT: aws-prod
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}

  deploy-to-prod:
    needs: [variables, approve-deployment-to-prod]
    uses: ./.github/workflows/sub_deploy_to_prod.yml
    with:
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}
