
name: Main - Attests to https://app.kosli.com

on:
  push:

env:
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}           # false
  KOSLI_HOST: ${{ vars.KOSLI_HOST }}                 # https://app.kosli.com
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_ORG: ${{ vars.KOSLI_ORG }}                   # cyber-dojo
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}                 # dashboard-ci
  KOSLI_TRAIL: ${{ github.sha }}
  KOSLI_SONAR_API_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
  SERVICE_NAME: ${{ github.event.repository.name }}  # dashboard


jobs:

  pull-request:
    runs-on: ubuntu-latest
    needs: []
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Kosli CLI
        if: ${{ github.ref }} == 'refs/heads/main'
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest pull-request evidence to Kosli
        if: ${{ github.ref }} == 'refs/heads/main'
        run:
          kosli attest pullrequest github
            --github-token="${{ secrets.GITHUB_TOKEN }}"
            --name=pull-request


  lint:
    runs-on: ubuntu-latest
    needs: []
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Rubocop linter on source
        id: lint
        run:
          make lint

      - name: Setup Kosli CLI
        if: ${{ github.ref }} == 'refs/heads/main' && (success() || failure())
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest results to Kosli
        if: ${{ github.ref }} == 'refs/heads/main' && (success() || failure())
        run: |
          KOSLI_COMPLIANT=$([ "${{ steps.lint.outcome }}" == 'success' ] && echo true || echo false)          
          kosli attest generic \
            --name=dashboard.lint


  snyk-code-scan:
    runs-on: ubuntu-latest
    needs: []
    env:
      SARIF_FILENAME: snyk.code.scan.json
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk code scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run:
          snyk code test 
            --sarif 
            --sarif-file-output="${SARIF_FILENAME}" 
            --policy-path=.snyk 
            .

      - name: Setup Kosli CLI
        if: ${{ github.ref }} == 'refs/heads/main' && (success() || failure())
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest Snyk code scan results to Kosli
        if: ${{ github.ref }} == 'refs/heads/main' && (success() || failure())
        run:
          kosli attest snyk
            --name=dashboard.snyk-code-scan 
            --scan-results="${SARIF_FILENAME}"


  sonarcloud-scan:
    runs-on: ubuntu-latest
    needs: []
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run SonarCloud scan
        env:
          SONAR_TOKEN: ${{ env.KOSLI_SONAR_API_TOKEN }}
        uses: sonarsource/sonarcloud-github-action@master

      - name: Setup Kosli CLI
        if: ${{ github.ref }} == 'refs/heads/main' && (success() || failure())
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest SonarCloud scan results to Kosli using Kosli CLI
        if: ${{ github.ref }} == 'refs/heads/main' && (success() || failure())
        run:
          kosli attest sonar
            --name=dashboard.sonarcloud-scan


  short-sha:
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.variable.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set outputs
        id: variable
        run:
          echo "value=${GITHUB_SHA:0:7}" >> ${GITHUB_OUTPUT}


  image:
    runs-on: ubuntu-latest
    needs: [short-sha]
    env:
      IMAGE_NAME: cyberdojo/${{ github.event.repository.name }}:${{ needs.short-sha.outputs.value }}
    outputs:
      tag:         ${{ steps.variables.outputs.tag }}
      name:        ${{ steps.variables.outputs.name }}
      fingerprint: ${{ steps.variables.outputs.fingerprint }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push image to Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}
          build-args:
            COMMIT_SHA=${{ github.sha }}

      - name: Setup Kosli CLI
        if: ${{ github.ref }} == 'refs/heads/main'
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest image to Kosli
        if: ${{ github.ref }} == 'refs/heads/main'
        run:
          kosli attest artifact "${IMAGE_NAME}" 
            --artifact-type=docker
            --name=dashboard

      - name: Make variables available to following jobs
        id: variables
        run: |
          TAG=${{ needs.short-sha.outputs.value }}
          FINGERPRINT=$(kosli fingerprint "${IMAGE_NAME}" --artifact-type=docker)
          echo "tag=${TAG}"                 >> ${GITHUB_OUTPUT}
          echo "name=${IMAGE_NAME}"         >> ${GITHUB_OUTPUT}
          echo "fingerprint=${FINGERPRINT}" >> ${GITHUB_OUTPUT}
              

  unit-tests:
    needs: [image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run tests
        run:
          ./sh/run_tests_with_coverage.sh          


  snyk-container-scan:
    runs-on: ubuntu-latest
    needs: [image]
    env:
      IMAGE_NAME:        ${{ needs.image.outputs.name }}
      KOSLI_FINGERPRINT: ${{ needs.image.outputs.fingerprint }}
      SARIF_FILENAME:    snyk.container.scan.json
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk container scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run:
          snyk container test "${IMAGE_NAME}" 
            --file=Dockerfile 
            --sarif 
            --sarif-file-output="${SARIF_FILENAME}" 
            --policy-path=.snyk

      - name: Setup Kosli CLI
        if: ${{ github.ref }} == 'refs/heads/main' && (success() || failure())
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest Snyk container scan results to Kosli
        if: ${{ github.ref }} == 'refs/heads/main' && (success() || failure())
        run:
          kosli attest snyk 
            --name=dashboard.snyk-container-scan 
            --scan-results="${SARIF_FILENAME}"


  sdlc-control-gate:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [image, lint, pull-request, unit-tests, snyk-container-scan, snyk-code-scan, sonarcloud-scan]
    env:
      IMAGE_NAME:        ${{ needs.image.outputs.name }}
      KOSLI_FINGERPRINT: ${{ needs.image.outputs.fingerprint }}
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit the workflow
        run:
          kosli assert artifact "${IMAGE_NAME}"


  approve-deployment-to-beta:
    runs-on: ubuntu-latest
    needs: [image, sdlc-control-gate]
    env:
      IMAGE_NAME:        ${{ needs.image.outputs.name }}
      KOSLI_FINGERPRINT: ${{ needs.image.outputs.fingerprint }}
    environment:
      name: staging
      url: https://beta.cyber-dojo.org
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        env:
          KOSLI_ENVIRONMENT: aws-beta
        run:
          kosli report approval "${IMAGE_NAME}"
            --approver="${{ github.actor }}"

  deploy-to-beta:
    needs: [image, approve-deployment-to-beta]
    uses: ./.github/workflows/sub_deploy_to_beta.yml
    with:
      IMAGE_TAG: ${{ needs.image.outputs.tag }}


  approve-deployment-to-prod:
    runs-on: ubuntu-latest
    needs: [image, deploy-to-beta]
    env:
      IMAGE_NAME:        ${{ needs.image.outputs.name }}
      KOSLI_FINGERPRINT: ${{ needs.image.outputs.fingerprint }}
    environment:
      name: production
      url: https://cyber-dojo.org
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        env:
          KOSLI_ENVIRONMENT: aws-prod
        run:
          kosli report approval "${IMAGE_NAME}"
            --approver="${{ github.actor }}"


  deploy-to-prod:
    needs: [image, approve-deployment-to-prod]
    uses: ./.github/workflows/sub_deploy_to_prod.yml
    with:
      IMAGE_TAG: ${{ needs.image.outputs.tag }}


  # The cyberdojo/versioner refresh-env.sh script
  # https://github.com/cyber-dojo/versioner/blob/master/sh/refresh-env.sh
  # relies on being able to:
  #   - get the :latest image
  #   - extract the SHA env-var embedded inside it
  #   - use the 1st 7 chars of the SHA as a latest-equivalent tag

  push-latest:
    needs: [image, deploy-to-prod]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.image.outputs.name }}
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Tag image to :latest and push to Dockerhub Registry
        run: |
          docker pull "${IMAGE_NAME}"
          docker tag "${IMAGE_NAME}" cyberdojo/${{ env.SERVICE_NAME }}:latest
          docker push cyberdojo/${{ env.SERVICE_NAME }}:latest