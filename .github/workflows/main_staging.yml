name: Reports to https://staging.app.kosli.com

on:
  push:
    branches:
      - main

env:
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}
  KOSLI_HOST: ${{ vars.KOSLI_HOST_STAGING }} # https://staging.app.kosli.com
  KOSLI_ORG: ${{ vars.KOSLI_ORG }}           # cyber-dojo
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}         # dashboard
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN_STAGING }}


jobs:

  variables:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.vars.outputs.image_name }}
      image_tag: ${{ steps.vars.outputs.image_tag }}
      kosli_host: ${{ steps.vars.outputs.kosli_host }}
      kosli_org: ${{ steps.vars.outputs.kosli_org }}
    steps:
    - name: Prepare
      id: vars
      run: |
        TAG=$(echo $GITHUB_SHA | head -c7)        
        echo "image_name=cyberdojo/${{ env.KOSLI_FLOW }}:${TAG}" >> ${GITHUB_OUTPUT}
        echo "image_tag=${TAG}" >> ${GITHUB_OUTPUT}
        echo "kosli_host=${{ env.KOSLI_HOST }}" >> ${GITHUB_OUTPUT}
        echo "kosli_org=${{ env.KOSLI_ORG }}" >> ${GITHUB_OUTPUT}        


  create-kosli-flow:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Create Kosli Flow
        run:
          kosli create flow "${{ env.KOSLI_FLOW }}" 
            --description="UX for a group practice dashboard" 
            --template=artifact,snyk-scan,lint,pull-request


  lint:
    needs: [variables, create-kosli-flow]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.0
          bundler-cache: true

      - name: Run Rubocop linter on source, report results to Kosli flow
        run: |
          export LINT_EVIDENCE_DIR=/tmp/evidence/lint
          mkdir -p "${LINT_EVIDENCE_DIR}"
          gem install rubocop
          set +e
          rubocop --raise-cop-error . > "${LINT_EVIDENCE_DIR}"/rubocop.log
          STATUS=$?
          set -e
          
          KOSLI_LINT_COMPLIANT=$([ ${STATUS} = 0 ] && echo true || echo false)
          cp .rubocop.yml "${LINT_EVIDENCE_DIR}"
          kosli report evidence commit generic \
            --compliant="${KOSLI_LINT_COMPLIANT}" \
            --evidence-paths="${LINT_EVIDENCE_DIR}" \
            --name=lint
          exit $STATUS


  pull-request:
    needs: [variables, create-kosli-flow]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report pull-request evidence to Kosli
        run:
          kosli report evidence commit pullrequest github
            --flows="${{ env.KOSLI_FLOW }}"
            --github-token="${{ secrets.GITHUB_TOKEN }}"
            --name=pull-request


  build-image:
    needs: [variables, create-kosli-flow]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Wait for image to be built in main.yml
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}          
          ./sh/wait_for_image.sh "${IMAGE_NAME}"

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report image to Kosli flow
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}                    
          docker pull "${IMAGE_NAME}"
          kosli report artifact "${IMAGE_NAME}" \
            --artifact-type=docker


  unit-tests:
    needs: [variables, build-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run tests
        run: |
          ./sh/upgrade_docker_compose.sh          
          ./sh/run_tests_with_coverage.sh          


  snyk-scan:
    needs: [variables, build-image]
    runs-on: ubuntu-latest
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}                                        
          snyk container test "${IMAGE_NAME}" \
            --file=Dockerfile \
            --json-file-output=snyk.json \
            --policy-path=.snyk

      - name: Report Snyk results to Kosli flow
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}                              
          docker pull "${IMAGE_NAME}"
          kosli report evidence artifact snyk "${IMAGE_NAME}" \
            --artifact-type=docker  \
            --name=snyk-scan  \
            --scan-results=snyk.json


  sdlc-control-gate:
    needs: [variables, lint, pull-request, unit-tests, snyk-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit-the-flow
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}          
          docker pull "${IMAGE_NAME}"
          kosli assert artifact "${IMAGE_NAME}" \
            --artifact-type=docker          


  approve-deployment-to-beta:
    needs: [variables, sdlc-control-gate]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Report approval of deployment
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}          
          docker pull "${IMAGE_NAME}"
          kosli report approval "${IMAGE_NAME}" \
            --artifact-type=docker \
            --environment=aws-beta \
            --approver="${{ github.actor }}"

      - name: Report expected deployment to Kosli
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}          
          docker pull "${IMAGE_NAME}"
          kosli expect deployment "${IMAGE_NAME}" \
            --artifact-type=docker \
            --description="Deployed to aws-beta in Github Actions pipeline" \
            --environment=aws-beta


  approve-deployment-to-prod:
    needs: [variables, approve-deployment-to-beta]
    uses: ./.github/workflows/sub_approve_deployment.yml
    secrets:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN_STAGING }}
    with:
      KOSLI_HOST: ${{ needs.variables.outputs.kosli_host }}
      KOSLI_ORG: ${{ needs.variables.outputs.kosli_org }}
      KOSLI_ENVIRONMENT: aws-prod
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}


  push-latest:
    needs: [variables, approve-deployment-to-prod]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push image:latest to Dockerhub Registry
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}          
          docker pull "${IMAGE_NAME}"  
          docker tag "${IMAGE_NAME}" "cyberdojo/${{ env.KOSLI_FLOW }}:latest"
          docker push "cyberdojo/${{ env.KOSLI_FLOW }}:latest"
    

