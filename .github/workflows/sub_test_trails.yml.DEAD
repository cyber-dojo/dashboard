name: Sub - test image

on:
  workflow_call:
    secrets:
      KOSLI_API_TOKEN:
        required: true
      SNYK_TOKEN:
        required: true
    inputs:
      KOSLI_HOST:
        default: https://app.kosli.com
        required: false
        type: string
      KOSLI_ORG:
        default: cyber-dojo
        required: false
        type: string
      IMAGE_TAG:
        required: true
        type: string

env: 
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}
  KOSLI_HOST: ${{ inputs.KOSLI_HOST }}
  KOSLI_ORG: ${{ inputs.KOSLI_ORG }}
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:

#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup Kosli CLI
#        uses: kosli-dev/setup-cli-action@v2
#        with:
#          version: ${{ vars.KOSLI_CLI_VERSION }}
#
#      - uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: 3.2.0
#          bundler-cache: true
#
#      - name: Run Rubocop linter on source, report results to Kosli Trail
#        run: |
#          export LINT_EVIDENCE_DIR=/tmp/evidence/lint
#          mkdir -p "${LINT_EVIDENCE_DIR}"
#          gem install rubocop
#          set +e
#          rubocop --raise-cop-error . > "${LINT_EVIDENCE_DIR}"/rubocop.log
#          STATUS=$?
#          set -e
#
#          KOSLI_LINT_COMPLIANT=$([ ${STATUS} = 0 ] && echo true || echo false)
#          cp .rubocop.yml "${LINT_EVIDENCE_DIR}"
#          kosli attest generic \
#            --compliant="${KOSLI_LINT_COMPLIANT}" \
#            --evidence-paths="${LINT_EVIDENCE_DIR}" \
#            --name=dashboard.lint \
#            --trail="${GITHUB_SHA}"
#          exit $STATUS

#  report-image:
#    needs: [lint]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Wait for image to be built in main.yml
#        run:
#          ./sh/wait_for_image.sh
#
#      - name: Setup Kosli CLI
#        uses: kosli-dev/setup-cli-action@v2
#        with:
#          version: ${{ vars.KOSLI_CLI_VERSION }}
#
#      - name: Report image to Kosli flow
#        run: |
#          IMAGE_TAG="$(echo $GITHUB_SHA | head -c7)"
#          IMAGE_NAME="cyberdojo/${{ env.KOSLI_FLOW }}:${IMAGE_TAG}"
#          docker pull "${IMAGE_NAME}"
#          kosli attest artifact "${IMAGE_NAME}" \
#            --artifact-type=docker \
#            --name=dashboard \
#            --trail="${GITHUB_SHA}"

#  unit-tests:
#    needs: [report-image]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Run tests
#        run: |
#          ./sh/upgrade_docker_compose.sh
#          ./sh/run_tests_with_coverage.sh

#  snyk-scan:
#    needs: [report-image]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup Kosli CLI
#        uses: kosli-dev/setup-cli-action@v2
#        with:
#          version: ${{ vars.KOSLI_CLI_VERSION }}
#
#      - name: Setup Snyk
#        uses: snyk/actions/setup@master
#
#      - name: Run Snyk to check Docker image for vulnerabilities
#        continue-on-error: true
#        run:
#           snyk container test cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}
#            --file=Dockerfile
#            --json-file-output=snyk.json
#            --policy-path=.snyk
#
#      - name: Report Snyk results to Kosli Trail
#        run: |
#          IMAGE_NAME=cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}
#          docker pull ${IMAGE_NAME}
#          kosli attest snyk ${IMAGE_NAME} \
#            --artifact-type=docker \
#            --name=dashboard.snyk-scan \
#            --scan-results=snyk.json \
#            --trail="${GITHUB_SHA}"

#  pull-request:
#    needs: [report-image]
#    runs-on: ubuntu-latest
#    permissions:
#      id-token: write
#      contents: write
#      pull-requests: read
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup Kosli CLI
#        uses: kosli-dev/setup-cli-action@v2
#        with:
#          version: ${{ vars.KOSLI_CLI_VERSION }}
#
#      - name: Report pull-request evidence to Kosli
#        run: |
#          IMAGE_NAME=cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}
#          docker pull ${IMAGE_NAME}
#          kosli attest pullrequest github ${IMAGE_NAME} \
#            --artifact-type=docker \
#            --github-token=${{ secrets.GITHUB_TOKEN }} \
#            --name=dashboard.pull-request \
#            --trail="${GITHUB_SHA}"

